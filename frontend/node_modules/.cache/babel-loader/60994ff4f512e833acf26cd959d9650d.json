{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zubin\\\\Receiply\\\\frontend\\\\src\\\\privateroute.jsx\";\n\n/*\r\nimport React, { Component } from \"react\";\r\nimport { Redirect, Route } from \"react-router\";\r\nimport axios from \"axios\";\r\n\r\n\r\nclass PrivateRoute extends Component {\r\n  state = {\r\n    authorized: \"\",\r\n    component: this.props.component,\r\n    route: this.props.route,\r\n  };\r\n  componentDidMount() {\r\n    axios\r\n      .get(\"/api/authorize\")\r\n      .then((result) => this.setState({ authorized: result.data }))\r\n      .catch((error) => {\r\n        console.log(error.response);\r\n      });\r\n  }\r\n  render() {\r\n    if (this.state.authorized === false) {\r\n      return <Redirect to=\"/login\" />;\r\n    }\r\n    return <Route path={this.state.route} component={this.state.component} />;\r\n  }\r\n}\r\n\r\nexport default PrivateRoute;\r\n*/\nimport React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { isLogin } from \"../utils\";\n\ncheckAuth = () => {\n  let isAuth = axios.get(\"/api/authorize\");\n  return isAuth.data;\n};\n\nconst PrivateRoute = ({\n  component: Component,\n  ...rest\n}) => {\n  return (\n    /*#__PURE__*/\n    // Show the component only when the user is logged in\n    // Otherwise, redirect the user to /signin page\n    React.createElement(Route, Object.assign({}, rest, {\n      render: props => checkAuth() ? /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 23\n        }\n      })) : /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/login\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 50\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 5\n      }\n    }))\n  );\n};\n\nexport default PrivateRoute;","map":{"version":3,"sources":["C:/Users/zubin/Receiply/frontend/src/privateroute.jsx"],"names":["React","Route","Redirect","axios","isLogin","checkAuth","isAuth","get","data","PrivateRoute","component","Component","rest","props"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,UAAxB;;AAEAC,SAAS,GAAG,MAAM;AAChB,MAAIC,MAAM,GAAGH,KAAK,CAACI,GAAN,CAAU,gBAAV,CAAb;AACA,SAAOD,MAAM,CAACE,IAAd;AACD,CAHD;;AAKA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,SAAS,EAAEC,SAAb;AAAwB,KAAGC;AAA3B,CAAD,KAAuC;AAC1D;AAAA;AACE;AACA;AACA,wBAAC,KAAD,oBACMA,IADN;AAEE,MAAA,MAAM,EAAGC,KAAD,IACNR,SAAS,kBAAK,oBAAC,SAAD,oBAAeQ,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAL,gBAAgC,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAH7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHF;AAUD,CAXD;;AAaA,eAAeJ,YAAf","sourcesContent":["/*\r\nimport React, { Component } from \"react\";\r\nimport { Redirect, Route } from \"react-router\";\r\nimport axios from \"axios\";\r\n\r\n\r\nclass PrivateRoute extends Component {\r\n  state = {\r\n    authorized: \"\",\r\n    component: this.props.component,\r\n    route: this.props.route,\r\n  };\r\n  componentDidMount() {\r\n    axios\r\n      .get(\"/api/authorize\")\r\n      .then((result) => this.setState({ authorized: result.data }))\r\n      .catch((error) => {\r\n        console.log(error.response);\r\n      });\r\n  }\r\n  render() {\r\n    if (this.state.authorized === false) {\r\n      return <Redirect to=\"/login\" />;\r\n    }\r\n    return <Route path={this.state.route} component={this.state.component} />;\r\n  }\r\n}\r\n\r\nexport default PrivateRoute;\r\n*/\r\n\r\nimport React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { isLogin } from \"../utils\";\r\n\r\ncheckAuth = () => {\r\n  let isAuth = axios.get(\"/api/authorize\");\r\n  return isAuth.data;\r\n};\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }) => {\r\n  return (\r\n    // Show the component only when the user is logged in\r\n    // Otherwise, redirect the user to /signin page\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        checkAuth() ? <Component {...props} /> : <Redirect to=\"/login\" />\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n"]},"metadata":{},"sourceType":"module"}